plugins {
  id 'java'
  id 'application'
  id 'checkstyle'
  id 'io.freefair.lombok' version '5.0.1'
  id 'com.limark.gitflowsemver' version '0.3.1'
  id 'com.diffplug.gradle.spotless' version '3.29.0'
  id 'com.google.cloud.tools.jib' version '2.3.0'
}

group = 'com.github.rishabh9'

repositories {
  mavenCentral()
}

ext {
  vertxVersion = '3.9.1'
  junitJupiterEngineVersion = '5.4.0'
  log4j2Version = '2.13.2'
  disruptorVersion = '3.4.2'
  tikaVersion = '1.24.1'
  aaltoVersion = '1.2.2'
}

application {
  mainClassName = 'io.vertx.core.Launcher'
  applicationDefaultJvmArgs = [
      '-Dlog4j2.contextSelector=org.apache.logging.log4j.core.async.AsyncLoggerContextSelector',
      '-Dvertx.logger-delegate-factory-class-name=io.vertx.core.logging.Log4j2LogDelegateFactory'
  ]
}

java {
  withJavadocJar()
  withSourcesJar()

  sourceCompatibility = JavaVersion.VERSION_11
  targetCompatibility = JavaVersion.VERSION_11
}

def mainVerticleName = 'com.github.rishabh9.kumoru.MainVerticle'
def watchForChange = 'src/**/*'
def doOnChange = './gradlew classes'

dependencies {
  implementation "io.vertx:vertx-web:$vertxVersion"
  implementation "io.vertx:vertx-web-client:$vertxVersion"

  implementation "org.apache.tika:tika-core:$tikaVersion"
  implementation "com.fasterxml:aalto-xml:$aaltoVersion"

  implementation "org.apache.logging.log4j:log4j-api:$log4j2Version"
  implementation "org.apache.logging.log4j:log4j-core:$log4j2Version"
  implementation "com.lmax:disruptor:$disruptorVersion"

  testImplementation "io.vertx:vertx-junit5:$vertxVersion"
  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitJupiterEngineVersion"
  testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterEngineVersion"
}

test {
  useJUnitPlatform()
  testLogging {
    events 'PASSED', 'FAILED', 'SKIPPED'
  }
}

run {
  args = [
      'run', mainVerticleName,
      "--redeploy=$watchForChange",
      "--launcher-class=$mainClassName",
      "--on-redeploy=$doOnChange"
  ]
  jvmArgs = [
      '-Dlog4j2.contextSelector=org.apache.logging.log4j.core.async.AsyncLoggerContextSelector',
      '-Dvertx.logger-delegate-factory-class-name=io.vertx.core.logging.Log4j2LogDelegateFactory'
  ]
}

jib {
  from {
    image = 'azul/zulu-openjdk-alpine:11-jre'
  }
  to {
    image = 'rishabh9/kumoru'
    credHelper = 'docker-credential-osxkeychain'
    project.afterEvaluate {
      tags = [version] as Set<String>
    }
  }
  container {
    jvmFlags = [
        '-Dlog4j2.contextSelector=org.apache.logging.log4j.core.async.AsyncLoggerContextSelector',
        '-Dvertx.logger-delegate-factory-class-name=io.vertx.core.logging.Log4j2LogDelegateFactory'
    ]
    format = 'OCI'
    mainClass = mainClassName
    args = ['run', mainVerticleName]
  }
}

spotless {
  java {
    googleJavaFormat('1.7')
  }
}

task createVersionFile {
  // destination directory for the version file
  def versionFileDir = "$buildDir/resources/main"
  // version filename
  def versionFileName = "version.properties"
  doLast {
    file(versionFileDir).mkdirs()
    file("$versionFileDir/$versionFileName").delete()
    // Groovy concise syntax for writing into file; maybe you want to delete this file first.
    file("$versionFileDir/$versionFileName") << "version=$version"
  }
}

// make processResources depends on createVersionFile task
processResources.dependsOn createVersionFile